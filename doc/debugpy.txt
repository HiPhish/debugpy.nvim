*debugpy.txt*	Debug Python code in Neovim
                                                                     *debugpy*
 ____       _                                          _~
|  _ \  ___| |__  _   _  __ _ _ __  _   _   _ ____   _(_)_ __ ___~
| | | |/ _ \ '_ \| | | |/ _` | '_ \| | | | | '_ \ \ / / | '_ ` _ \~
| |_| |  __/ |_) | |_| | (_| | |_) | |_| |_| | | \ V /| | | | | | |~
|____/ \___|_.__/ \__,_|\__, | .__/ \__, (_)_| |_|\_/ |_|_| |_| |_|~
                        |___/|_|    |___/~


Version: 0.6.0
Author: Alejandro "HiPhish" Sanchez
License: MIT License



==============================================================================
TABLE OF CONTENTS                                           *debugpy-contents*


    1. Introduction ........................................ |debugpy-intro|
    2. Setup and configuration ............................. |debugpy-setup|
    3. Using ............................................... |debugpy-using|
       3.1 Launch a process ................................ |debugpy-launch|
       3.2 Attach to running process ....................... |debugpy-attach|
       3.3 Attach to remote process ........................ |debugpy-ssh|
    4  Included adapters ................................... |debugpy-adapter|
    5. Debugpy API ......................................... |debugpy-api|
    6. Further reading ..................................... |debugpy-seealso|


==============================================================================
INTRODUCTION                                                   *debugpy-intro*

Debugpy is a Python debug adapter server which implements the server side of
the Debug Adapter Protocol (DAP). The nvim-dap plugin (|dap.txt|) is a Neovim
plugin which implements the client side of DAP.

Debugpy.nvim provides the |:Debugpy| command which will create the appropriate
debugger configurations for you and launch the debugger. You do not have to
set up Debugpy yourself.

Only launching the debugger is covered, it is up to your own configuration how
to use the debugger once it is running. This allows debugpy.nvim to integrate
into your workflow.


==============================================================================
SETUP AND CONFIGURATION                                        *debugpy-setup*

Install debugpy.nvim like any other Neovim plugin. Make sure that nvim-dap and
Debugpy are already working on your system.

                                                              *debugpy-launch*
We can try it out with a simple Python script. Create a new Python module
named `main.py` with the following contents:
>
    def add(x, y):
        """Recursively add two positive numbers"""
        if y == 0:
            return x
        return add(x + 1, y - 1)


    if __name__ == '__main__':
        x, y = 2, 3
        print(f'The sum of {x} and {y} is {add(x, y)}.')
<
Make sure Debugpy is installed in your environment. Open the script in Neovim,
create a breakpoint (see |dap.set_breakpoint()|) somewhere (e.g. line 3) and
execute the `:Debugpy module main` command. The debugger will run the module
and stop at your breakpoint.

                                                              *debugpy-attach*

It is possible to attach the debugger to a running process through the
sub-command |:Debugpy-attach|. To try it out create a new Python module named
`server.py` with the following contents:
>
    import time
    import random
    import debugpy

    (host, port) = debugpy.listen(5678)

    print(f'Debugpy: Listening on {host}:{port}')

    if __name__ == '__main__':
        while True:
            x, y = random.randint(1, 10), random.randint(1, 10)
            print(f'The sum of {x} and {y} is {x + y}.')
            time.sleep(1)
<
Now launch this script from the shell and you will have an endlessly running
Python process. Open the script in Neovim (in another shell), set your
breakpoint somewhere inside the loop (e.g. line 13), then execute the
`:Debugpy attach 127.0.0.1 5678` command (you do have to spell out the IP, you
cannot write `localhost`). The debugger will stop at your breakpoint on the
next loop iteration.

It is also possible to listen for DAP clients without modifying the source
code by launching the Python program through Debugpy itself. Please refer to
the Debugpy command line reference for more information. Example:
>
    # Debug module 'main' with arguments 'foo' and 'bar'
    python -m debugpy --listen 5678 -m main foo bar
<
                                                                 *debugpy-ssh*

It is possible to debug a process running on a remote machine following the
above instructions as long as you have local port forwarding set up. When
attaching specify `127.0.0.1` as the host and the forwarded port as the port.

Example:
>
    # In one shell connect to the remote machine
    ssh -L 5678:localhost:5678 user@remote
    # Navigate to the project on the remote machine
    cd /home/jdoe/projects/my-project/
    # Run the program
    python -m main
<
You can now use |:Debugpy-attach| to start the debugger on your local machine.
It is important that both machines have the same source code and ideally the
same version of Debugpy.


==============================================================================
USING                                                          *debugpy-using*

There is one new command (|:Debugpy|) which takes a number of arguments and
starts the debugger with an appropriate configuration

                                                                    *:Debugpy*
:Debugpy {subcmd} [{arg} ...]
:Debugpy

    Start the debugger with a configuration based on the {subcmd} and its
    arguments. For convenience if you execute `:Debugpy` without any arguments
    the last invocation will be re-used. This does not persist between Neovim
    sessions, you have to execute the command at least once with arguments.

    The following sub-commands are implemented by defaut:

        - |:Debugpy-module|   Run a single Python module
        - |:Debugpy-program|  Run a Python program
        - |:Debugpy-code|     Run a code snippet
        - |:Debugpy-attach|   Attach to a running Python process)

    You can add your own sub-commands or modify the existing ones through the
    |debugpy-api|.


------------------------------------------------------------------------------
                                                             *:Debugpy-module*
:Debugpy module {module} [{arg} ...]

    Debug a specific Python module. The argument must be given the same way as
    if you were running via `python -m {module}` it from the command line. The
    remaining arguments are passed as command-line arguments to Python.

    Example:
>
        Debugpy module main foo bar
>

------------------------------------------------------------------------------
                                                            *:Debugpy-program*
:Debugpy program [{program} [{arg} ...]]

    Debug a {program} given its absolute path or path relative to the current
    working directory. The remaining {arg}s are passed as command-line
    arguments to Python.

    If the {program} is omitted the current file will be used as the program.

    Example:
>
        " Path relative to current working directory
        Debugpy program main.py foo bar

        " Absolute path
        Debugpy program /home/jdoe/projects/my-project/main.py foo bar
>

------------------------------------------------------------------------------
                                                               *:Debugpy-code*
:Debugpy code {code}

    Debug the given snippet of source code. This is rather awkward to use from
    the command line because you need to escape all special characters (see
    |cmdline-special|).

    Example:
>
        " A code snippet which jumps straight into a function call
        Debugpy code from\ foo\ import\ bar;\ bar(1,\ 2)
<
    This sub-command is much easier to use in the |debugpy-api|. Here is the
    same example as above, but using the API instead.

    Example: Vim script
>
        let conf = debugpy#configure('code', 'from foo import bar; bar(1, 2)')
        call debugpy#run(conf)
<
    Example: Lua
>
        local debugpy = require 'debugpy'

        local conf = debugpy.configure('code', 'from foo import bar; bar(1, 2)')
        debugpy.run(conf)
<

------------------------------------------------------------------------------
                                                             *:Debugpy-attach*
:Debugpy attach {host} {port}

    Attach to a running Python process which is listening for DAP clients.
    First you need to launch the process in a separate shell and have it
    listen for DAP client connections. Once you know the {host} and {port} you
    can attach to the process.

    Note
        If the process is running on a remote you must be editing the same
        source code as what is running on the remote machine.

    Note
        You cannot use `localhost` as the host, you have to spell out the IP
        `127.0.0.1` instead.

    See |debugpy-attach| and |debugpy-ssh| for examples.


==============================================================================
INCLUDED ADAPTERS                                            *debugpy-adapter*

There are two custom adapters included, see |debugpy.adapter|. Those two
adapters will be automatically registered. For convenience the included
adapters will be registered under the following names, unless there already is
an adapter with that name.

    `python`              |debugpy.adapter.executable| 
    `debugpy_executable`  |debugpy.adapter.executable| 
    `debugpy_server`      |debugpy.adapter.executable| 

See |dap-adapter| for more information on adapters.


==============================================================================
API                                                              *debugpy-api*

Debugpy is hackable, you can customize the default of debugpy.nvim by settings
the values within its public module `debugpy`.


------------------------------------------------------------------------------
                                                            *g:loaded_debugpy*

Set this variable to a |TRUE| value before the plugin has been loaded to
prevent it from loading. The API will still work, it is lazy-loaded.


------------------------------------------------------------------------------
                                                               *debugpy.run()*
debugpy.run({config})

    Callback function to run the debugger with the final configuration (see
    |dap-configuration|) which you can replace with your implementation. The
    default implementations calls |dap.run|.

    Example: Lua
>
        -- Your personal default settings
        default = { justMyCode = false }

        -- Implementation which injects your default settings
        require('debugpy').run = function(config)
            local final = vim.tbl_extend('keep', config, default)
            require('dap').run(final)
        end
<
    You can also call this function directly to run the debugger. Example:
>
        local debugpy = require 'debugpy'
        local config = debugpy.configure('attach', '127.0.0.1', '5678')

        debugpy.run(config)
<
                                                               *debugpy#run()*
debugpy#run({config})

    Vim script wrapper around |debugpy.run()|. Do not overwrite this
    implementation, overwrite |debugpy.run()| in Lua instead.

    Example:
>
        let config = debugpy#configure('attach', '127.0.0.1', '5678')
        call debugpy#run(config)


------------------------------------------------------------------------------
                                                         *debugpy.configure()*
                                                         *debugpy#configure()*
debugpy.configure({subcmd}[, {arg} ...])
debugpy#configure({subcmd}[, {arg} ...])

    Takes a subcommand string {subcmd} and any number of string {arg}uments,
    returns the final |dap-configuration|. The function does check the arity
    of the subcommand, it is an error to supply the wrong number of arguments.

    There is a Lua function and a Vim script function.

    Example: Lua
>
        -- Manually configure
        local debugpy = require 'debugpy'
        local config = debugpy.configure('attach', '127.0.0.1, '5678')
<
    Example: Vim script
>
        " Manually configure
        let config = debugpy#configure('attach', '127.0.0.1, '5678')
<

------------------------------------------------------------------------------
                                                  *debugpy.adapter*

Table containing the adapters. See also |debugpy-adapter|.


                                                  *debugpy.adapter.executable*

Adapter which launches a Python process.


                                                  *debugpy.adapter.server*

Adapter which attaches to a running Python process. See |debugpy-ssh| for
instructions.

------------------------------------------------------------------------------
                                                          *debugpy.subcommand*
                                                        *g:debugpy_subcommand*

This variable is a Lua table or a Vim script dictionary, both can exist at the
same time. The key is the name of a sub-command, the value is its
specification.

Each specification has the following entries:

    'arity'      A table or dictionary describing the arity of the
                 sub-command; the entry 'min' is mandatory, the entry 'max' is
                 optional (unlimited upper arity if omitted)

    'configure'  A function which takes the arguments (as strings) from the
                 sub-command and returns a configuration table according to
                 |dap-configuration|
    'complete'   A function which takes a list of string arguments to complete
                 the subcommand and a boolean whether the current argument is
                 incomplete, returns a list of completion candidates. The
                 arguments are the same arguments which are being passed to
                 the `:Debugpy` command following the subcommand.

You can define sub-commands in either Vim script or Lua, both work equally. If
a subcommand in defined in both it is undefined which one will be chosen.

Example: Lua
>
    -- Fixed arity
    local code = {
        arity = {min = 1, max = 1},
        configure = function(code)
            return {
                type = 'debugpy_executable',
                request = 'launch',
                code = code
            }
        end
    }

    -- Variable arity, completion function
    local program = {
        arity = {min = 0},
        configure = function(program, ...)
            return {
                type = 'debugpy_executable',
                request = 'launch',
                program = program or '${file},
                args = {...}
            }
        end,
        completion = function(args, arg_pending)
            -- Only complete the first argument, stop if it is complete
            if #args > 1 or (#args == 1 and not arg_pending) then
                return {}
            end
            -- For a real implementation you need to escape whitespace in the
            -- result entries
            return vim.fn.getcompletion(args[1] or '', 'file')
        end
    }
<


==============================================================================
FURTHER READING                                              *debugpy-seealso*

Offical Debugpy website:
    https://github.com/microsoft/debugpy

Debugpy Wiki:
    https://github.com/microsoft/debugpy/wiki

nvim-dap:
    https://github.com/mfussenegger/nvim-dap

nvim-dap manual:
    |dap.txt|

Official DAP website:
    https://microsoft.github.io/debug-adapter-protocol/


==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
